{"version":3,"sources":["components/TreeInput.tsx","app/hooks.ts","features/data.ts","styles/Column.tsx","styles/Row.tsx","components/TreeItem.tsx","views/Treemap.tsx","components/RowInput.tsx","views/UserInput.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["rawInput","useAppDispatch","useDispatch","useAppSelector","useSelector","sampleTree","name","weight","value","dataSlice","createSlice","initialState","tree","rows","reducers","initData","state","updateTree","action","payload","Math","max","min","length","updateRows","actions","selectTree","selectRows","selectItemSize","selectMaxWeightPerRow","maxWeight","map","item","totalWeight","reduce","total","current","ceil","Column","styled","div","props","size","Row","Box","weightPerRow","sign","Wrapper","TreeItem","Treemap","index","key","JsonIuput","textarea","Warning","TreeInput","stateTree","dispatch","useState","tmpInput","setTmpInput","msg","setMsg","useEffect","stringify","cols","aria-label","onChange","event","jsonString","target","input","parsedInput","JSON","parse","some","Number","isInteger","e","validate","NumberInput","RowInput","type","UserInput","GlobalStyle","createGlobalStyle","App","Fragment","store","configureStore","reducer","dataReducer","devTools","process","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.01008876.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { Item, selectTree, updateTree } from \"../features/data\";\r\nimport { useAppDispatch, useAppSelector } from \"../app/hooks\";\r\nimport stringify from \"json-stringify-pretty-compact\";\r\nimport styled from \"styled-components\";\r\n\r\nconst JsonIuput = styled.textarea`\r\n  width: 100%;\r\n`;\r\n\r\nconst Warning = styled.div`\r\n  color: red;\r\n  min-height: 2em;\r\n`;\r\n\r\nlet rawInput: string;\r\n\r\nconst TreeInput = () => {\r\n  const stateTree = useAppSelector(selectTree);\r\n  const dispatch = useAppDispatch();\r\n  const [tmpInput, setTmpInput] = useState(\"\");\r\n  const [msg, setMsg] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    rawInput = stringify(stateTree);\r\n    setTmpInput(rawInput);\r\n  }, [stateTree]);\r\n\r\n  const validate = (input: string): boolean => {\r\n    try {\r\n      const parsedInput: Item[] = JSON.parse(input);\r\n      // 1. length <= 50\r\n      if (parsedInput.length > 50) {\r\n        setMsg(\"Maximum data length is 50\");\r\n        return false;\r\n      }\r\n      // 2. name.length <= 50 & is string\r\n      if (\r\n        parsedInput.some((item) => {\r\n          return typeof item.name !== \"string\" || item.name.length > 50;\r\n        })\r\n      ) {\r\n        setMsg(\"All name has to be string and length < 50\");\r\n        return false;\r\n      }\r\n      // 3. weight is integer\r\n      if (\r\n        parsedInput.some((item) => {\r\n          return (\r\n            typeof item.weight !== \"number\" || !Number.isInteger(item.weight)\r\n          );\r\n        })\r\n      ) {\r\n        setMsg(\"All weight has to be integer\");\r\n        return false;\r\n      }\r\n      setMsg(\"\");\r\n      return true;\r\n    } catch (e) {\r\n      setMsg(\"Invalid JSON\");\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // TODO: add debounce\r\n  const handleChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n    const jsonString = event.target.value;\r\n    setTmpInput(jsonString);\r\n    if (validate(jsonString)) {\r\n      const parsedInput: Item[] = JSON.parse(jsonString);\r\n      dispatch(updateTree(parsedInput));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <JsonIuput\r\n        cols={50}\r\n        rows={20}\r\n        value={tmpInput}\r\n        aria-label=\"tree-input\"\r\n        onChange={handleChange}\r\n      />\r\n      <Warning>{msg}</Warning>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TreeInput;\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\nimport type { RootState, AppDispatch } from \"./store\";\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"../app/store\";\r\n\r\nexport interface Item {\r\n  name: string;\r\n  weight: number;\r\n  value: number;\r\n}\r\n\r\nexport interface TreeState {\r\n  tree: Item[];\r\n  rows: number;\r\n}\r\n\r\nconst initialState: TreeState = {\r\n  tree: [],\r\n  rows: 1,\r\n};\r\n\r\nexport const sampleTree: Item[] = [\r\n  { name: \"A\", weight: 3, value: -0.02 },\r\n  { name: \"B\", weight: 3, value: 0.05 },\r\n  { name: \"C\", weight: 6, value: 0.015 },\r\n  { name: \"D\", weight: 2, value: -0.01 },\r\n  { name: \"E\", weight: 3, value: 0.01 },\r\n];\r\n\r\nexport const defaultRows = 3;\r\n\r\nexport const dataSlice = createSlice({\r\n  name: \"data\",\r\n  initialState,\r\n  reducers: {\r\n    initData: (state) => {\r\n      state.tree = sampleTree;\r\n      state.rows = defaultRows;\r\n    },\r\n    updateTree: (state, action: PayloadAction<Item[]>) => {\r\n      state.tree = action.payload;\r\n      state.rows = Math.max(1, Math.min(state.rows, action.payload.length));\r\n    },\r\n    updateRows: (state, action: PayloadAction<number>) => {\r\n      state.rows = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { initData, updateTree, updateRows } = dataSlice.actions;\r\n\r\n// selectors\r\nexport const selectTree = (state: RootState) => state.tree;\r\nexport const selectRows = (state: RootState) => state.rows;\r\nexport const selectItemSize = (state: RootState) => state.tree.length;\r\nexport const selectMaxWeightPerRow = (state: RootState) => {\r\n  // calculation: total weight / no. of rows\r\n  // if any of the item has a larger width, update the max weight\r\n  const maxWeight = Math.max(...state.tree.map((item) => item.weight));\r\n  const totalWeight = state.tree.reduce((total, current) => {\r\n    return total + current.weight;\r\n  }, 0);\r\n  return Math.max(maxWeight, Math.ceil(totalWeight / state.rows));\r\n};\r\n\r\nexport default dataSlice.reducer;\r\n","import styled from \"styled-components\";\r\n\r\ninterface Props {\r\n  readonly size: number;\r\n}\r\n\r\nconst Column = styled.div<Props>`\r\n  width: ${(props: Props) => `calc(${props.size} * 10%)`};\r\n  padding: 20px;\r\n\r\n  @media screen and (max-width: 767px) {\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nexport default Column;\r\n","import styled from \"styled-components\";\r\n\r\nconst Row = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: flex-start;\r\n  padding: 20px;\r\n\r\n  @media (max-width: 767px) {\r\n    flex-direction: column;\r\n  }\r\n`;\r\n\r\nexport default Row;\r\n","import styled from \"styled-components\";\r\nimport { Item } from \"../features/data\";\r\n\r\ninterface Props extends Item {\r\n  weightPerRow: number;\r\n  rows: number;\r\n}\r\n\r\nconst Box = styled.div<Props>`\r\n  display: inline-block;\r\n  border: 1px solid black;\r\n  /* calculate height by dividing no. of rows in % */\r\n  height: ${(props) => `calc(100% / ${props.rows})`};\r\n  /* calculate width by dividing weight by weight per row in % */\r\n  width: ${(props) => `calc(100% / ${props.weightPerRow} * ${props.weight})`};\r\n  background-color: ${(props) => {\r\n    switch (Math.sign(props.value)) {\r\n      case 1:\r\n        return \"green\";\r\n      case -1:\r\n        return \"red\";\r\n      default:\r\n        return \"grey\";\r\n    }\r\n  }};\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst TreeItem = (props: Props) => {\r\n  return (\r\n    <Box {...props}>\r\n      <Wrapper>\r\n        <div>{props.name}</div>\r\n        <div>{props.value * 100}%</div>\r\n      </Wrapper>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default TreeItem;\r\n","import styled from \"styled-components\";\r\nimport { useAppSelector } from \"../app/hooks\";\r\nimport {\r\n  selectMaxWeightPerRow,\r\n  selectRows,\r\n  selectTree,\r\n} from \"../features/data\";\r\nimport Item from \"../components/TreeItem\";\r\n\r\nconst Box = styled.div`\r\n  width: 100%;\r\n  border: 1px solid black;\r\n  height: calc(80vh - 40px);\r\n`;\r\n\r\nconst Treemap = () => {\r\n  const tree = useAppSelector(selectTree);\r\n  const rows = useAppSelector(selectRows);\r\n  const weightPerRow = useAppSelector(selectMaxWeightPerRow);\r\n\r\n  return (\r\n    <div>\r\n      <h3>Result</h3>\r\n      <Box>\r\n        {tree.map((item, index) => {\r\n          return (\r\n            <Item\r\n              {...item}\r\n              weightPerRow={weightPerRow}\r\n              rows={rows}\r\n              key={`${index}_${item.name}`}\r\n            />\r\n          );\r\n        })}\r\n      </Box>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Treemap;\r\n","import styled from \"styled-components\";\r\nimport { useAppDispatch, useAppSelector } from \"../app/hooks\";\r\nimport { selectRows, updateRows, selectItemSize } from \"../features/data\";\r\n\r\nconst NumberInput = styled.input`\r\n  width: 100%;\r\n`;\r\n\r\nconst RowInput = () => {\r\n  const rows = useAppSelector(selectRows);\r\n  const max = useAppSelector(selectItemSize);\r\n  const dispatch = useAppDispatch();\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    // validate\r\n    const value = Number(event.target.value);\r\n    if (value && value <= max) {\r\n      dispatch(updateRows(value));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <NumberInput\r\n        type=\"number\"\r\n        min={1}\r\n        max={max}\r\n        value={rows}\r\n        aria-label=\"rows-input\"\r\n        onChange={handleChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RowInput;\r\n","import TreeInput from \"../components/TreeInput\";\r\nimport RowInput from \"../components/RowInput\";\r\n\r\nconst UserInput = () => {\r\n  return (\r\n    <div>\r\n      <div>\r\n        <h3>Data</h3>\r\n        <TreeInput />\r\n      </div>\r\n      <div>\r\n        <h3>Row Number</h3>\r\n        <RowInput />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserInput;\r\n","import React, { useEffect } from \"react\";\nimport { useAppDispatch } from \"./app/hooks\";\nimport { initData } from \"./features/data\";\nimport Column from \"./styles/Column\";\nimport Row from \"./styles/Row\";\nimport Treemap from \"./views/Treemap\";\nimport UserInput from \"./views/UserInput\";\nimport { createGlobalStyle } from \"styled-components\";\n\nconst GlobalStyle = createGlobalStyle`\nbody {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\",\n    \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\",\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n* {\n  box-sizing: border-box;\n}\n\n`;\n\nfunction App() {\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    dispatch(initData());\n  }, [dispatch]);\n\n  return (\n    <React.Fragment>\n      <GlobalStyle />\n      <Row>\n        <Column size={3}>\n          <UserInput />\n        </Column>\n        <Column size={7}>\n          <Treemap />\n        </Column>\n      </Row>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from \"@reduxjs/toolkit\";\nimport dataReducer from \"../features/data\";\n\nexport const store = configureStore({\n  reducer: dataReducer,\n  devTools: process.env.NODE_ENV === \"development\",\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { store } from \"./app/store\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}